# -*- coding: utf-8 -*-
"""Metafour

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C9JLacQ8os8GMlOcwLOhXhbMNxTdKFH0
"""

# !pip install sentence-transformers

# import os
# import ast
import pandas as pd
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
from scipy import sparse
model = SentenceTransformer('bert-large-nli-stsb-mean-tokens')

phrases = pd.read_excel('/content/drive/MyDrive/DataSets/Phrases.xlsx')
programs = pd.read_excel('/content/drive/MyDrive/DataSets/Programs.xlsx')

encoded_phrases = model.encode(phrases['Opportunity Name'])
encoded_programs = model.encode(programs['Program Name'])
#pickle.dump(encodings_recipe,open("recipe_embedding.pickle",'wb'))

# encodings_recipe_df = pickle.load(open("recipe_embedding.pickle",'rb'))
phrases_df = pd.DataFrame(encoded_phrases)
programs_df = pd.DataFrame(encoded_programs)

sparse_phrases = sparse.csr_matrix(phrases_df)
sparse_programs = sparse.csr_matrix(programs_df)

similarities = pd.DataFrame(cosine_similarity(sparse_programs, sparse_phrases))
# pickle.dump(df1,open('similarities_sparse.pickle','wb'))

# df1 = pickle.load(open('similarities_sparse.pickle','rb'))
data_similarity = similarities.unstack().reset_index()
data_similarity.columns = ['phrase', 'program', 'Match Probability']

phrases_dict = {}
for i,v in enumerate(phrases['Opportunity Name']):
    phrases_dict[i] = v
category_dict = {}
for i,v in enumerate(phrases['Product Line']):
    category_dict[i] = v
programs_dict = {}
for i,v in enumerate(programs['Program Name']):
    programs_dict[i] = v

data_similarity.sort_values('Match Probability', ascending=False, inplace=True)

data_similarity['Product Line'] = data_similarity['phrase'].map(category_dict)
# data_similarity['Key Phrase'] = data_similarity['phrase'].map(phrases_dict)
data_similarity['Opportunity'] = data_similarity['program'].map(programs_dict)
data_similarity.drop(['program', 'phrase'], axis=1, inplace=True)
data_similarity.reset_index(inplace=True, drop=True)

data_similarity.drop(data_similarity[data_similarity['Match Probability'] < 0.75].index, inplace=True)

results = pd.DataFrame(data_similarity)
results = results.groupby(['Opportunity', 'Product Line'], sort=False)['Match Probability'].max().reset_index()